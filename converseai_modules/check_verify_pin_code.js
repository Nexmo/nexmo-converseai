/**
 * @file check_verify_pin_code.js
 * @author leggetter@vonage.com
 * @description Check a Nexmo Verification Pin Code 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;

const NexmoBuilder = require('./NexmoBuilder');

module.exports = function check_verify_pin_code (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} apiKey API Key  */
  var apiKey = body.payload.registrationData.api_key;

  /** @type {String} apiSecret API Secret  */
  var apiSecret = body.payload.registrationData.api_secret;

  /** @type {String} applicationId Nexmo Application ID  */
  var applicationId = body.payload.registrationData.application_id;

  /** @type {String} applicationPrivateKey Nexmo Application Private 
  * Key  */
  var applicationPrivateKey = body.payload.registrationData.application_private_key;


  /** @type {String} requestId A unique ID for an active verify request  */
  var requestId = body.payload.moduleParam.request_id;

  /** @type {Number} pinCode A verify pin code to be checked  */
  var pinCode = body.payload.moduleParam.pin_code;

  if (apiKey !== undefined && apiSecret !== undefined && requestId !== undefined && pinCode !== undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();
  
    const nexmo = NexmoBuilder.build(body.payload.registrationData);
       
    const result = nexmo.verify.check({request_id: requestId, code: pinCode}, (error, result) => {
      if(error) {
        console.error(error);
        response.setValue(error);
        app.send(Status.FAIL, response);
      }
      else {
        console.log(result);
        response.setValue(result);
        app.send(Status.SUCCESS, response);
      }
    });

  } else { 
    app.fail({ httpStatus: 500, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};
