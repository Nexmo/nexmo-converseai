/**
 * @file send_sms.js
 * @author leggetter@vonage.com
 * @description Send an SMS 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;

const Nexmo = require('nexmo');

module.exports = function send_sms (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} apiKey API Key  */
  var apiKey = body.payload.registrationData.api_key;

  /** @type {String} apiSecret API Secret  */
  var apiSecret = body.payload.registrationData.api_secret;

  /** @type {String} applicationId Nexmo Application ID  */
  var applicationId = body.payload.registrationData.application_id;

  /** @type {String} applicationPrivateKey Nexmo Application Private 
  * Key  */
  var applicationPrivateKey = body.payload.registrationData.application_private_key;

    /** @type {String} from The phone number or alphanumeric sender 
  * ID the SMS is being sent from  */
  var from = body.payload.moduleParam.from;
  
  /** @type {String} to The phone number the SMS is to be sent to  */
  var to = body.payload.moduleParam.to;

  /** @type {String} text The message text to be sent in the SMS  */
  var text = body.payload.moduleParam.text;

  /** @type {Boolean} unicode A flag to indicate if the message contains 
  * special characters  */
  var unicode = body.payload.moduleParam.unicode;

  if (apiKey !== undefined && apiSecret !== undefined && 
      from !== undefined && to !== undefined && text !== undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();

    const nexmo = new Nexmo({
      apiKey: apiKey,
      apiSecret: apiSecret
    });

    const options = {};
    if(unicode) {
      options.type = 'unicode';
    }
    nexmo.message.sendSms(from, to, text, options, (error, result) => {
      if(error) {
        console.error(error);
        response.setValue(error);
        app.send(Status.FAIL, response);
      }
      else {
        console.log(result);
        response.setValue(result);
        app.send(Status.SUCCESS, response);
      }
    });
    
  } else { 
    app.fail({ httpStatus: 500, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};
