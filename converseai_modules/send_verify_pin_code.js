/**
 * @file send_verify_pin_code.js
 * @author leggetter@vonage.com
 * @description Send a Verify pin code to start the phone number 
 * verification process 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.ModuleResponse;

const NexmoBuilder = require('./NexmoBuilder');

module.exports = function send_verify_pin_code (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} apiKey API Key  */
  var apiKey = body.payload.registrationData.api_key;

  /** @type {String} apiSecret API Secret  */
  var apiSecret = body.payload.registrationData.api_secret;

  /** @type {String} applicationId Nexmo Application ID  */
  var applicationId = body.payload.registrationData.application_id;

  /** @type {String} applicationPrivateKey Nexmo Application Private 
  * Key  */
  var applicationPrivateKey = body.payload.registrationData.application_private_key;


  /** @type {String} number The phone number that the pin code is 
  * to be sent to.  */
  var number = body.payload.moduleParam.number;

  /** @type {String} country If do not set number in international 
  * format or you are not sure if number is correctly formatted, 
  * set country with the two-character country code. For example, 
  * GB, US. Verify works out the international phone number for 
  * you.  */
  var country = body.payload.moduleParam.country;

  /** @type {String} brand The name of the company or App you are 
  * using Verify for. This 18 character alphanumeric string is used 
  * in the body of Verify message. For example: "Your brand PIN 
  * is ..".  */
  var brand = body.payload.moduleParam.brand;

  /** @type {String} senderId An 11 character alphanumeric string 
  * to specify the SenderID for SMS sent by Verify. Depending on 
  * the destination of the phone number you are applying, restrictions 
  * may apply. By default, sender_id is VERIFY.  */
  var senderId = body.payload.moduleParam.sender_id;

  /** @type {Number} codeLength The length of the PIN. Possible values 
  * are 6 or 4 characters. The default value is 4.  */
  var codeLength = body.payload.moduleParam.code_length;

  /** @type {String} language By default, the SMS or text-to-speech 
  * (TTS) message is generated in the locale that matches the number. 
  * For example, the text message or TTS message for a 33* number 
  * is sent in French. Use this parameter to explicitly control 
  * the language, accent and gender used for the Verify request. 
  * The default language is en-us.  */
  var language = body.payload.moduleParam.language;

  /** @type {String} restrictNetworkType Restrict verification to 
  * a certain network type. Possible values are:  */
  var restrictNetworkType = body.payload.moduleParam.restrict_network_type;

  /** @type {Number} pinExpiry The PIN validity time from generation. 
  * This is an integer value between 60 and 3600 seconds. The default 
  * is 300 seconds. When specified together, pin_expiry must be 
  * an integer multiple of nextEventWaitSeconds. Otherwise, pinExpiry 
  * is set to equal nextEventWaitSeconds.  */
  var pinExpiry = body.payload.moduleParam.pin_expiry;

  /** @type {Number} nextEventWaitSeconds An integer value between 
  * 60 and 900 seconds inclusive that specifies the wait time between 
  * attempts to deliver the PIN. Verify calculates the default value 
  * based on the average time taken by users to complete verification.  */
  var nextEventWaitSeconds = body.payload.moduleParam.next_event_wait_seconds;

  if (apiKey !== undefined && apiSecret !== undefined && number !== undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();
  
    const nexmo = NexmoBuilder.build(body.payload.registrationData);

    const requestParams = {
      number: number,
      brand: brand,
      country: country,
      sender_id: senderId,
      code_length: codeLength,
      lg: language,
      require_type: restrictNetworkType,
      pin_expiry: pinExpiry,
      next_wait_event: nextEventWaitSeconds
    };

    for(let paramName in requestParams) {
      if(!requestParams[paramName]) {
        // console.log(`deleting ${paramName}`);
        delete requestParams[paramName];
      }
    }
    
    const result = nexmo.verify.request(requestParams, (error, result) => {
      if(error) {
        console.error(error);
        response.setValue(error);
        app.send(Status.FAIL, response);
      }
      else {
        console.log(result);
        response.setValue(result);
        app.send(Status.SUCCESS, response);
      }
    });

  } else { 
    app.fail({ httpStatus: 500, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};
